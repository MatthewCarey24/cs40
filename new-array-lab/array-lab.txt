           CS 40 Lab: Unboxed and 2D Arrays


+--------------------------------------------------------+
|Keeper of the record:                                   |
|--------------------------------------------------------|
| Other group member(s):                                 |
|                                                        |
|                                                        |
|                                                        |
+--------------------------------------------------------+


PART 1: BOXED AND UNBOXED ARRAYS
--------------------------------

You are about to design the interface and implementation for a
collection data type, i.e., an ADT like Hanson's, and you are
considering the tradeoffs between using a boxed or an unboxed
interface for values that users store in your collection.

1A: Briefly define the terms "boxed" and "unboxed" as used for these
    interfaces (i.e., help us be sure you know which is which!):
        A boxed interface stores a pointer to the data type you are storing, in 
        a uniform packaging (pointer). An unboxed array does not have this 
        packaging, and stores the data itself, rather than a pointer to the data






1B: List two (or more) advantages of the boxed representation.
        - does not allow the collection to directly alter data
        - aDont need to know size of data types, can put anything in







1C: List two (or more) advantages of an unboxed representation.
        - takes up less space, as the pointers themselves are 8 bits
        - less time complexity to access the data







1D: Look at the interface to UArray (a link to an interface
    summary is at the start of the lab instructions). Discuss the 
    methods that show the use of the unboxed style. Why, for example, 
    does UArray_new take both a number of elements and an element size? 

        Because it is unboxed, UArray needs the size of each element as well as 
        the number of elements because it needs to know how much data to 
        allocate. For example, because an unboxed array can take any element, if
        it is given a length of 10 elements it also needs to know the size of 
        each element so it knows how much data to allocate for 10 elements. 










PART 2: 2D Arrays from 1D Arrays
--------------------------------

2A. One way to construct a 2D array is to use multiple 1D
    arrays. Describe briefly how you would do this. For example, if
    the user asked you to create a 5x7 array of values, how many
    one-dimensional arrays would you create? If the user asked to
    store a value in cell [3,6] where would it go?

        You could do it by creating a 1D array who's elements are each another 
        1D array. For example, to create a 5x7 array, you would create 6 1D 
        arrays, the first one of length 5 that contains every row, and each of 
        its 5 elements would be a length 7 array. A value to be stored in [3,6]
        would go in index 6 of the array at index 3 of the column array.







2B. Another approach is to use a single one-dimensional array and to
    put all the elements of the 2D array into that. Again, assuming
    that you are to create a 7x5 2D array, give a mathematical formula
    for the index in the 2D array where a value [x,y] would go in the
    1D array.

        You could make a 1D array that has as many elements as your theoretical 
        2D array, and would use a mathematical formula to map a 2D index to its 
        1D index. 
        For a column major indexing, (put things in 1D array by going down the 
        row), you would get the 1D index from the 2D index by doing:
        index = 5*x + y (where 5 is the height of 2d array)



 


2C. (optional) is there another mapping that would work as well?

        to do row major indexing, the equation you would use is:
        index = (width * y) + x










PART 3: Designing the UArray2 Interface
---------------------------------------

3A. Describe three (or more) things you learned about the design and semantics
    of the UArray2 interface from reading useuarray2.c and from running
    correct_useuarray2.
        We learned we can pass a function into another function
        








